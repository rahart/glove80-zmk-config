/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define HYPER LC(LS(LG(LALT)))

// layers

#define DEFAULT 0
#define LOWER 1
#define MAGIC 2
#define FACTORY_TEST 3

/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to

        layer_td: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo 1>, <&to 1>;
        };

        magic: magic_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };
    };

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 3>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  F1   |  F2 |  F3 |  F4  |  F5  |                                                               |  F6   |  F7   |  F8  |   F9  |  F10 |
            // |  =    |  1  |  2  |  3   |  4   |  5   |                                                 |  6   |   7   |   8   |  9   |   0   |   -  |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                                                 |  Y   |   U   |   I   |  O   |   P   |   \  |
            // |  ESC  |  A  |  S  |  D   |  F   |  G   |                                                 |  H   |   J   |   K   |  L   |   ;   |   '  |
            // |   `   |  Z  |  X  |  C   |  V   |  B   | LSHFT | LCTRL | LOWER | | LGUI  | RCTRL | RSHFT |  N   |   M   |   ,   |  .   |   /   | PGUP |
            // | MAGIC | HOME| END | LEFT | RIGHT|      | BSPC  | DEL   | LALT  | | RALT  | RET   | SPACE |      |  UP   | DOWN  |  [   |   ]   | PGDN |

            bindings = <
&kp F1                   &kp F2     &kp F3   &kp F4            &kp F5                                                                                                                                                      &kp F6    &kp F7     &kp F8   &kp F9         &kp F10
&kp EQUAL                &kp N1     &kp N2   &kp N3            &kp N4             &kp N5                                                                                                                           &kp N6  &kp N7    &kp N8     &kp N9   &kp N0         &kp MINUS
&kp TAB                  &kp Q      &kp W    &kp F             &kp P              &kp B                                                                                                                            &kp J   &kp L     &kp U      &kp Y    &kp SEMICOLON  &kp BSLH
&mt LEFT_CONTROL ESCAPE  &kp A      &kp R    &kp S             &kp T              &kp G                                                                                                                            &kp M   &kp N     &kp E      &kp I    &kp O          &kp SQT
&kp LEFT_SHIFT           &kp Z      &kp X    &kp C             &kp D              &kp V   &kp LEFT_CONTROL  &kp LEFT_ALT  &layer_td                   &kp RIGHT_ALT              &kp RIGHT_WIN  &kp RIGHT_CONTROL  &kp K   &kp H     &kp COMMA  &kp DOT  &lt 5 SLASH    &kp RIGHT_SHIFT
&magic 2 0               &kp TILDE  &kp END  &kp LEFT_BRACKET  &kp RIGHT_BRACKET          &kp ENTER         &kp TAB       &kp LA(LC(LG(LEFT_SHIFT)))  &kp RA(RG(RIGHT_CONTROL))  &kp BACKSPACE  &lt 6 SPACE                &kp LEFT  &kp DOWN   &kp UP   &kp RIGHT      &kp SCROLLLOCK
            >;
        };

        lower_layer {
            bindings = <
&kp C_BRI_DN  &kp C_BRI_UP  &kp C_PREV  &kp C_NEXT  &kp C_PP                                                                         &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP   &none            &kp PAUSE_BREAK
&trans        &none         &none       &none       &none      &kp HOME                                                   &kp LPAR   &kp KP_NUM  &kp KP_EQUAL  &kp KP_DIVIDE  &kp KP_MULTIPLY  &kp PSCRN
&trans        &none         &none       &kp UP      &none      &kp END                                                    &kp RPAR   &kp KP_N7   &kp KP_N8     &kp KP_N9      &kp KP_MINUS     &kp SLCK
&trans        &none         &kp LEFT    &kp DOWN    &kp RIGHT  &kp PG_UP                                                  &kp PRCNT  &kp KP_N4   &kp KP_N5     &kp KP_N6      &kp KP_PLUS      &none
&trans        &kp K_CMENU   &none       &kp F11     &kp F12    &kp PG_DN  &trans  &trans  &to 0   &trans  &trans  &trans  &kp COMMA  &kp KP_N1   &kp KP_N2     &kp KP_N3      &kp KP_ENTER     &trans
&trans        &kp CAPS      &kp INS     &kp F11     &kp F12               &trans  &trans  &trans  &trans  &trans  &trans             &kp KP_N0   &kp KP_N0     &kp KP_DOT     &kp KP_ENTER     &trans
            >;
        };

        magic_layer {
            bindings = <
&bt BT_CLR   &none            &none            &none            &none                                                                                     &none  &none  &none  &none  &bt BT_CLR_ALL
&none        &none            &none            &none            &none            &none                                                             &none  &none  &none  &none  &none  &none
&none        &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                   &none  &none  &none  &none  &none  &none
&bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                   &none  &none  &none  &none  &none  &bootloader
&sys_reset   &none            &none            &none            &none            &none            &bt_2  &bt_3  &none         &none  &none  &none  &none  &none  &none  &none  &none  &sys_reset
&none        &none            &none            &none            &none                             &bt_0  &bt_1  &out OUT_USB  &none  &none  &none         &none  &none  &none  &none  &to 3
            >;
        };

        factory_test_layer {
            bindings = <
&kp N0  &kp N6  &kp N2  &kp N8  &kp N4                                                                  &kp N4  &kp N8  &kp N2  &kp N6  &kp N0
&kp N1  &kp N7  &kp N3  &kp N9  &kp N5  &kp N0                                                  &kp N0  &kp N5  &kp N9  &kp N3  &kp N7  &kp N1
&kp N2  &kp N8  &kp N4  &kp N0  &kp N6  &kp N1                                                  &kp N1  &kp N6  &kp N0  &kp N4  &kp N8  &kp N2
&kp N3  &kp N9  &kp N5  &kp N1  &kp N7  &kp N2                                                  &kp N2  &kp N7  &kp N1  &kp N5  &kp N9  &kp N3
&kp N4  &kp N0  &kp N6  &kp N2  &kp N8  &kp N3  &kp N4  &kp N5  &kp N6  &kp N6  &kp N5  &kp N4  &kp N3  &kp N8  &kp N2  &kp N6  &kp N0  &kp N4
&kp N5  &kp N1  &kp N7  &kp N3  &kp N9          &kp N7  &kp N8  &kp N9  &kp N9  &kp N8  &kp N7          &kp N9  &kp N3  &kp N7  &kp N1  &kp N5
            >;
        };

        layer_4 {
            bindings = <
&trans         &trans         &trans        &trans         &trans                                                                                               &trans     &trans    &trans  &trans  &trans
&trans         &kp GRAVE      &kp LS(LPAR)  &kp LS(RPAR)   &kp SEMI      &kp COMMA                                                                      &trans  &trans     &trans    &trans  &trans  &trans
&kp LS(EXCL)   &kp LS(LPAR)   &kp SQT       &kp LS(DQT)    &kp LS(RBRC)  &kp LS(QMARK)                                                                  &trans  &trans     &trans    &trans  &trans  &trans
&kp LS(POUND)  &kp LS(CARET)  &kp EQUAL     &kp LS(UNDER)  &kp LS(DLLR)  &kp LS(STAR)                                                                   &trans  &kp SPACE  &kp BSPC  &trans  &trans  &trans
&kp LS(TILDE)  &kp LS(LT)     &kp LS(PIPE)  &kp MINUS      &kp LS(GT)    &kp FSLH       &kp BSLH       &kp DOT   &trans         &trans  &trans  &trans  &trans  &trans     &trans    &trans  &trans  &trans
&kp LS(AT)     &kp LS(AMPS)   &kp LBKT      &kp RBKT       &kp LS(PLUS)                 &kp LS(COLON)  &kp SEMI  &kp LS(PRCNT)  &trans  &trans  &trans          &trans     &trans    &trans  &trans  &trans
            >;
        };

        paren_symbol {
            bindings = <
&trans  &trans    &trans     &trans                &trans                                                                                                   &trans        &trans         &trans         &trans  &trans
&trans  &trans    &trans     &trans                &trans                 &trans                                                             &trans         &trans        &trans         &trans         &trans  &trans
&trans  &trans    &trans     &kp LBKT              &kp RBKT               &kp LS(PLUS)                                                       &kp LS(UNDER)  &kp LS(AMPS)  &kp LS(STAR)   &trans         &trans  &trans
&trans  &kp BSPC  &kp SPACE  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp EQUAL                                                          &kp MINUS      &kp LS(DLLR)  &kp LS(PRCNT)  &kp LS(CARET)  &trans  &trans
&trans  &trans    &trans     &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp LS(TILDE)  &trans   &trans   &trans    &trans  &trans  &trans  &kp GRAVE      &kp LS(EXCL)  &kp LS(AT)     &kp LS(POUND)  &trans  &trans
&trans  &trans    &trans     &kp LESS_THAN         &kp GREATER_THAN                      &kp RET  &kp TAB  &kp BSPC  &trans  &trans  &trans                 &trans        &trans         &trans         &trans  &trans
            >;
        };

        new_symbol {
            bindings = <
&none  &none        &none                 &none                  &none                                                                                              &none             &none           &none            &none      &none
&none  &none        &none                 &none                  &none              &none                                                                &none      &none             &none           &none            &none      &none
&none  &kp PERCENT  &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp DOUBLE_QUOTES  &kp DOLLAR                                                           &kp AT     &kp SINGLE_QUOTE  &kp LESS_THAN   &kp GT           &kp CARET  &none
&none  &kp HASH     &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp KP_EQUAL       &kp SEMICOLON                                                        &kp COLON  &kp PLUS          &kp LEFT_BRACE  &kp RIGHT_BRACE  &kp EXCL   &none
&none  &none        &kp AMPERSAND         &kp ASTERISK           &kp TILDE          &kp BACKSLASH  &none      &none          &none  &none  &none  &none  &kp PIPE   &kp GRAVE         &kp COMMA       &kp PERIOD       &none      &none
&none  &none        &none                 &none                  &none                             &kp SPACE  &kp BACKSPACE  &none  &none  &none  &none             &none             &none           &none            &none      &none
            >;
        };
    };
};
